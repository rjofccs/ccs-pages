#################################################basic
node01:sed 's/192.168.32.10/192.168.32.11/' /etc/sysconfig/network-scripts/ifcfg-ens33 -i
echo 'root:uw'|chpasswd
https://www.17ce.com/
atlanta:

apt-get install -y openssh-server
ssh-server配置文件位于/etc/ssh/sshd_config，
在这里可以定义SSH的服务端口，默认端口是22，你可以自己定义成其他端口号，如222。
（或把配置文件中的”PermitRootLogin without-password”加一个”#”号,把它注释掉，
再增加一句”PermitRootLogin yes”）
/etc/init.d/ssh start或service ssh start

vim /etc/resolv.conf
nameserver 8.8.8.8
nameserver 8.8.4.4
/etc/init.d/networking restart

cat <<'EOF' >> x.sh
x
EOF
docker-compose up -d

root  /usr/share/nginx/html;
autoindex  on;
set $node_port 1080;
proxy_pass http://120.78.191.195:$node_port$request_uri;
proxy_redirect off;
docker rm -f mynginx
chmod -R 755 /usr/local/www/html
docker cp mynginx:/etc/nginx/conf.d /usr/local/www/config/conf.d
#################################################apt-get
#################################################apt-get
apt-get install -y python3-pip
apt-get install -y ffmpeg
apt-get install -y tree
ffmpeg -decoders && ffmpeg -version
pip3 install ffmpeg-python
pip3 install requests
pip3 install arrow
pip3 install lxml
pip3 install PyMySQL
pip3 install you-get
pip3 install schedule

cd /usr/local/www/html
you-get 'https://www.youtube.com/watch?v=fhIrySD7SXo' -O test
ffmpeg -i test.mp4 -f mp3 -vn test.mp3
str(i+1).rjust(3,'0')
os.system('ffmpeg -i ./mp3.mp3 -ss x -to x -acodec copy ./mp4.mp3')
os.system('ffmpeg -i ./mp3.mp3 -ss x -t x -acodec copy ./mp4.mp3')
#################################################react
curl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash - 
apt -y install nodejs && node -v
npm install --global yarn && yarn --version
yarn global add typescript && tsc -v
yarn init
question entry point (index.js): src/app.ts
yarn add @types/node typescript
yarn add -D ts-node
yarn tsc --init --rootDir src --outDir ./bin --esModuleInterop --lib ES2019 --module commonjs --noImplicitAny true
mkdir src
echo "console.log('Hello World\!\!\!')" > src/app.ts
yarn tsc
"scripts": {
  "build": "tsc",
  "start": "node ./bin/app.js",
  "dev": "ts-node ./src/app.ts"
},
```
npx create-react-app my-app --template typescript
cd my-app&&npm start
cd /usr/local/mycode-server/config/workspace
chmod -R 777 /usr/local/mycode-server/config/workspace
http://139.144.171.90:8443/?folder=/config/workspace
yarn create react-app my-app --template typescript
cd my-app&&yarn build
cp -r ./build/* /usr/local/www/html/
```
yarn add @mui/material @emotion/react @emotion/styled
yarn add @fontsource/roboto

"build": "react-scripts build && mv build/* ../html"
#################################################java
apt-get -y install openjdk-8-jdk && java -version
apt -y install maven && mvn -version
wget https://repo.spring.io/release/org/springframework/boot/spring-boot-cli/2.7.4/spring-boot-cli-2.7.4-bin.tar.gz
tar -zxvf spring-boot-cli-2.7.4-bin.tar.gz
SPRING_HOME="$(pwd)/spring-2.7.4/" && PATH=$PATH:$SPRING_HOME/bin
echo $SPRING_HOME && echo $PATH
java -version && spring --version

cd /usr/local/mycode-server/config/workspace
chmod -R 777 /usr/local/mycode-server/config/workspace
spring init --build=maven --dependencies=web,data-jpa --java-version=1.8 my-project
mvn clean&&mvn package -Dmaven.test.skip=true

mkdir /usr/local/mycode-server/config/workspace/my-project/src/main/docker/
tee /usr/local/mycode-server/config/workspace/my-project/src/main/docker/Dockerfile<<-'EOF'
FROM openjdk:8
VOLUME /tmp
ADD dockerapp-0.0.1-SNAPSHOT.jar app.jar
RUN bash -c 'touch /app.jar'
ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]
EOF
mvn docker:build
docker images
docker exec -it myapp sh
docker logs myapp

mkdir -p /usr/local/app/logs
docker rm myapp -f&&docker run --name myapp -p 8888:8080 \
-v /usr/local/app/logs:/logs \
-v /usr/local/app/mp3:/mp3 \
--restart always \
-d ccs/dockerapp
#################################################schedule
mkdir /usr/local/schedule/
tee /usr/local/schedule/running.py<<-'EOF'
import schedule, time, os

def job():
    print("I'm working...")
    os.system('python x.py')

schedule.every(2).minutes.do(job)
# schedule.every().hour.do(job)
# schedule.every().day.at("10:30").do(job)
# schedule.every().monday.do(job)
# schedule.every().wednesday.at("13:15").do(job)

while True:
    schedule.run_pending()
    time.sleep(1)
EOF
tee /usr/local/schedule/pm2.json<<-'EOF'
{
    "name": "schedule",
    "script": "/usr/bin/python3",
    "args": [
        "/usr/local/schedule/running.py"
    ],
    "exec_interpreter": "",
    "exec_mode": "fork",
    "error_file" : "/usr/local/schedule/fz-err.log",
    "out_file"   : "/usr/local/schedule/fz-out.log"
}
EOF
#################################################pm2
npm install pm2 -g
pm2 start|stop|restart|describe|del xxx
pm2 list
pm2 startup && pm2 save 自动运行
pm2.json:
{
    "name": "my-server",
    "script": "/usr/bin/java",
    "args": [
        "-jar",
        "/home/imzhizi/tcm-fz/target/fz.jar",
        "--spring.profiles.active=prod"
    ],
    "exec_interpreter": "",
    "exec_mode": "fork",
    "error_file" : "/home/imzhizi/log/fz-err.log",
    "out_file"   : "/home/imzhizi/log/fz-out.log"
}
pm2 start pm2.json
#################################################docker
curl -sSL https://get.daocloud.io/docker | sh
systemctl daemon-reload && systemctl restart docker
#################################################code-server
docker pull lscr.io/linuxserver/code-server:latest
mkdir -p /usr/local/mycode-server/config
docker run --name mycodeserver \
-e PUID=1000 \
-e PGID=1000 \
-e TZ=Europe/London \
-p 8443:8443 \
-p 8080:8080 \
-v /usr/local/mycode-server/config:/config \
--restart unless-stopped \
-d lscr.io/linuxserver/code-server:latest

ls /usr/local/mycode-server/config/workspace

useless:
https://github.com/coder/code-server/releases
wget https://github.com/coder/code-server/releases/download/v4.8.0/code-server-4.8.0-linux-amd64.tar.gz
tar -zxvf code-server-4.8.0-linux-amd64.tar.gz
cd code-server-4.8.0-linux-amd64
#################################################arm-none-eabi-gcc
https://raw.githubusercontent.com/strongly-typed/docker-arm-none-eabi-gcc/master/Dockerfile
docker pull stronglytyped/arm-none-eabi-gcc
docker run --rm stronglytyped/arm-none-eabi-gcc arm-none-eabi-gcc -v
#################################################nginx
docker pull nginx:latest
mkdir -p /usr/local/www/{config,log,html,ssl}
tee /usr/local/www/config/nginx.conf <<-'EOF'
user root;
worker_processes  1;
events {
    worker_connections  1024;
}
http {
    #default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    server {
        listen       80;
        server_name  localhost;
        location / {
            root  /usr/share/nginx/html;
            autoindex  on;
        }
    }
}
EOF
tee /usr/local/www/html/index.html <<-'EOF'
index
EOF
docker run --name mynginx -p 80:80 -p 443:443 \
--restart always \
-v /usr/local/www/html:/usr/share/nginx/html \
-v /usr/local/www/config/nginx.conf:/etc/nginx/nginx.conf \
-v /usr/local/www/config/conf.d:/etc/nginx/conf.d \
-v /usr/local/www/log:/var/log/nginx \
-v /usr/local/www/ssl:/etc/nginx/ssl \
-d nginx
docker ps
docker exec -it mynginx sh
docker logs mynginx
#################################################mysql
docker pull mysql
mkdir -p /usr/local/mysql/{conf,logs,data}

docker run -p 3306:3306 --name mymysql \
-v /usr/local/mysql/conf:/etc/mysql/mysql.conf.d \
-e MYSQL_ROOT_PASSWORD=S1234567 \
-d mysql
#################################################mosquitto
docker pull eclipse-mosquitto
mkdir -p /usr/local/mosquitto/{config,data,log}
tee /usr/local/mosquitto/config/mosquitto.conf <<-'EOF'
persistence true
persistence_location /usr/local/mosquitto/data
log_dest file /usr/local/mosquitto/log/mosquitto.log
EOF

chmod -R 755 /usr/local/mosquitto
chmod -R 777 /usr/local/mosquitto/log
docker run -d --name=mymosquitto --privileged \
-p 1883:1883 -p 9001:9001 \
-v /usr/local/mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf \
-v /usr/local/mosquitto/data:/mosquitto/data \
-v /usr/local/mosquitto/log:/mosquitto/log \
eclipse-mosquitto
#################################################frps
docker pull snowdreamtech/frps
tee /usr/local/frps/frps.ini <<-'EOF'
[common]
bind_port = 7000
dashboard_port = 7500
dashboard_user = admin
dashboard_pwd = admin@123
vhost_http_port = 7080
vhost_https_port = 7081
token = 12345678
EOF
docker run --restart=always --network host -d -v /usr/local/frps/frps.ini:/etc/frp/frps.ini --name frps snowdreamtech/frps
tee /usr/local/frps/frpc.ini <<-'EOF'
[common]
server_addr = x.x.x.x
server_port = 7000
token = 12345678
[ssh]
type = tcp
local_ip = 192.168.31.100
local_port = 22
remote_port = 18022
[rdp]
type = tcp
local_ip = 192.168.31.101
local_port = 3389
remote_port = 18023
EOF
docker run --restart=always --network host -d -v /usr/local/frps/frpc.ini:/etc/frp/frpc.ini --name frpc snowdreamtech/frpc
#################################################
#################################################
docker pull nextcloud:latest
mkdir -p /usr/local/nextcloud
docker run -d -p 80:80  --name mynextcloud  \
-v /usr/local/nextcloud/:/var/www/html/ \
--restart=always --privileged=true nextcloud
admin/admin
#################################################
docker pull bwsw/webshell
docker run -d --name mywebshell \
--privileged \
--security-opt seccomp=unconfined \
-p 8018:80 \
-e ALLOWED_NETWORKS=0.0.0.0/0 \
bwsw/webshell
#################################################
docker pull fauria/vsftpd
docker run -d -p 20:20 -p 21:21 -p 21100-21110:21100-21110 \
-v /root/aria2/downloads:/home/vsftpd \
-e FTP_USER=admin \
-e FTP_PASS=adminadmin \
-e PASV_ADDRESS=192.168.0.101 \
-e PASV_MIN_PORT=21100 \
-e PASV_MAX_PORT=21110 \
--name vsftpd \
--restart=always \
fauria/vsftpd
docker exec -i -t vsftpd bash
#################################################
tee /usr/local/www/config/nginx.conf <<-'EOF'
user root;
worker_processes  1;
events {
    worker_connections  1024;
}
http {
    #default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    server {
        listen       443 ssl;
        server_name  moringstars.com www.moringstars.com;
        ssl_certificate     /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key  /etc/nginx/ssl/privkey.pem;
        ssl_session_timeout  5m;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }
    }
    server {
        listen       80;
        server_name  moringstars.com www.moringstars.com;
        location ~ /.well-known/acme-challenge/ {
            allow all;
            root /etc/nginx/;
        }
        location / {
            return 301 https://$server_name$request_uri;
        }
    }
}
EOF
docker restart mynginx
docker pull certbot/certbot
mkdir /usr/local/certbot/{letsencrypt,log}
docker run --rm --name temp_certbot \
    -v /usr/local/certbot/letsencrypt:/etc/letsencrypt \
    -v /usr/local/www/config:/tmp/letsencrypt \
    -v /usr/local/certbot/log:/var/log \
    certbot/certbot:v1.8.0 \
    certonly --webroot --agree-tos --renew-by-default \
    --preferred-challenges http-01 --server https://acme-v02.api.letsencrypt.org/directory \
    --text --email rjofccs@gmail.com \
    -w /tmp/letsencrypt -d moringstars.com -d www.moringstars.com

cp /usr/local/certbot/letsencrypt/archive/moringstars.com/fullchain2.pem /usr/local/www/ssl/fullchain.pem
cp /usr/local/certbot/letsencrypt/archive/moringstars.com/privkey2.pem /usr/local/www/ssl/privkey.pem
#################################################
docker pull mongo:4.0
docker run --name mymongo -d mongo:4.0 --smallfiles --replSet rs0 --oplogSize 128
docker exec -ti mymongo mongo --eval "printjson(rs.initiate())"
docker rm mymongo -f
#################################################
