firewall-cmd --permanent --zone=public --add-port=8080/tcp
firewall-cmd --permanent --zone=public --add-port=80/tcp
firewall-cmd --permanent --zone=public --add-port=443/tcp
firewall-cmd --reload
#################################################
JAVA_HOME=$PWD/graalvm-ce-$JAVA_VERSION-$GRAALVM_VERSION
PATH=./:$JAVA_HOME/bin/:$PATH
MAVEN_HOME=$PWD/apache-maven-$MAVEN_VERSION
PATH=$PATH:$MAVEN_HOME/bin/
PATH=$PATH:$PWD/quarkus-cli-$QUARKUS_VERSION.Final/bin/

yum install -y java-11 && yum -y install gcc glibc-devel zlib-devel gcc-c++ tar && java -version
JAVA_VERSION=java11
GRAALVM_VERSION=22.2.0
curl -L https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-$GRAALVM_VERSION/graalvm-ce-$JAVA_VERSION-linux-amd64-$GRAALVM_VERSION.tar.gz | tar -xzf -
gu install native-image && gu list

MAVEN_VERSION=3.8.4
curl -L https://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz | tar -xzf -

QUARKUS_VERSION=2.7.4
mvn -Dplugin=io.quarkus:quarkus-maven-plugin help:describe
curl -L https://github.com/quarkusio/quarkus/releases/download/$QUARKUS_VERSION.Final/quarkus-cli-$QUARKUS_VERSION.Final.tar.gz | tar -xzf -
-
mvn io.quarkus:quarkus-maven-plugin:$QUARKUS_VERSION.Final:create \
    -DprojectGroupId=com.example \
    -DprojectArtifactId=myapp \
    -DclassName="com.example.quarkus.Greeting" \
    -Dpath="/myapp"
8g    
mvn package -Pnative -DskipTests -Dquarkus.native.container-build=true -Dquarkus.native.container-runtime=docker
docker build -f src/main/docker/Dockerfile.native -t quarkus/myapp .
docker run -i --rm -p 8080:8080 quarkus/myapp
-
quarkus create com.example:myapp
cd myapp && quarkus dev || cd myapp && mvnw quarkus:dev
curl -w "\n" http://localhost:8080/myapp
#################################################
curl -sSL https://get.daocloud.io/docker | sh && systemctl daemon-reload && systemctl restart docker
#################################################
curl -fsSL https://rpm.nodesource.com/setup_16.x | sudo bash -
yum install -y nodejs && corepack enable yarn npm && yarn global add typescript
node --version && npm --version && yarn -v && tsc -v
#################################################
npm i docsify-cli -g && docsify -v
docsify init ./build
#################################################
docker pull lscr.io/linuxserver/code-server:latest
mkdir -p /usr/local/mycode-server/config
docker run --name mycodeserver \
-e PUID=1000 \
-e PGID=1000 \
-e TZ=Europe/London \
-p 8443:8443 \
-v /usr/local/mycode-server/config:/config \
--restart unless-stopped \
-d lscr.io/linuxserver/code-server:latest
#################################################
cd /usr/local/mycode-server/config/workspace
npx create-react-app my-app --template typescript
chmod -R 777 /usr/local/mycode-server/config/workspace
cd my-app&&npm start
#################################################
yum install -y nginx
vi /etc/nginx/nginx.conf
/usr/local/mycode-server/config/workspace/my-app/build
#systemctl restart nginx
#/var/log/nginx/error.log
#################################################
let是在代码块内有效，var是在全局范围内有效
let只能声明一次，var可以声明多次
let sy = Symbol("key1");
Promise:嵌套
//https://segmentfault.com/a/1190000011652907
var promise1 = new Promise(function(resolve, reject) {
  setTimeout(function() {
    resolve('aa');
  }, 2000);
});
promise1.then(function(data) {
  console.log(data);
  return 'bb';
}, function(err) {}).then(function(data) {
  console.log('1' + data);
  return 'cc';
}).then(function(data) {
  console.log(data);
  console.log('dd');

  return new Promise(function(resolve, reject) {
    reject('error');
  });
}, function(err) {}).then(function(data) {
  console.log('fulfilled');
}).catch(function(err) {
  console.log('catch' + err);
});
#################################################
https://www.runoob.com/react/react-lists-and-keys.html
compilerOptions.noImplicitAny: false

index.tsx:
import ReactDOM from 'react-dom/client';
const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
root.render(
  <h1>Hello, world!</h1>
);
-------------------------------------------------
function Hello() {
  return <h1>Hello World!</h1>;
}
root.render(<Hello />);
-------------------------------------------------
var myStyle = {
  fontSize: 100,
  color: '#FF0000'
};
function Hello() {
  {/*注释...*/}
  return <h1 style = {myStyle}>Hello World!</h1>;
}
-------------------------------------------------
function HelloMessage(props) {
    return <h1>Hello {props.name}!</h1>;
}
const element = <HelloMessage name="Runoob"/>;
root.render(element);
-------------------------------------------------
class Clock extends React.Component<{}, {date: Date}> {
  constructor(props) {
    super(props);
    this.state = {date: new Date()};
    console.log(typeof setInterval);
    setInterval(() => {this.setState({date: new Date()})}, 1000);
  }
  render() {
    return (
      <div>
        <h1>Hello, world!</h1>
        <h2>{this.state.date.toLocaleTimeString()}.</h2>
      </div>
    );
  }
}
const element = <Clock />;
root.render(element);
-------------------------------------------------
class WebSite extends React.Component<{}, {name: String}> {
  constructor(props) {
      super(props);
      this.state = {name: "Runoob"}
  }
  render() {
    return (
      <div>
        <Name name={this.state.name} />
      </div>
    );
  }
}
class Name extends React.Component<{name: String}, {}> {
  render() {
    return (<h1>{this.props.name}</h1>);
  }
}
root.render(<WebSite />);
-------------------------------------------------
function ActionLink() {
  function handleClick(e) {
    e.preventDefault();
    console.log('clicked');
  }
 
  return (<a href="#" onClick={handleClick}>Click</a>);
}
root.render(<ActionLink />);
-------------------------------------------------1
class Toggle extends React.Component<{},{isToggleOn: boolean}> {
  constructor(props) {
    super(props);
    this.state = {isToggleOn: true};
    this.handleClick = this.handleClick.bind(this);
  }
 
  handleClick() {
    this.setState(prevState => ({
      isToggleOn: !prevState.isToggleOn
    }));
  }
 
  render() {
    return (
      <button onClick={this.handleClick}>
        {this.state.isToggleOn ? 'ON' : 'OFF'}
      </button>
    );
  }
}
root.render(<Toggle />);
-------------------------------------------------2
class Toggle extends React.Component<{},{isToggleOn: boolean}> {
  constructor(props) {
    super(props);
    this.state = {isToggleOn: true};
    this.handleClick = this.handleClick.bind(this);
  }
 
  handleClick = () => {//handleClick() {
    this.setState({
      isToggleOn: !this.state.isToggleOn
    });
  }
 
  render() {
    return (
      <button onClick={this.handleClick}>
        {this.state.isToggleOn ? 'ON' : 'OFF'}
      </button>
    );
  }
}
root.render(<Toggle />);
-------------------------------------------------
const numbers = [1, 2, 3, 4, 5];
const listItems = numbers.map((numbers) =>
  <li>{numbers}</li>
);
root.render(<ul>{listItems}</ul>);
-------------------------------------------------
function NumberList(props) {
  const numbers = props.numbers;
  const listItems = numbers.map((number) =>
    <li key={number.toString()}>{number}</li>
  );
  return (
    <ul>{listItems}</ul>
  );
}
const numbers = [1, 2, 3, 4, 5];
root.render(<NumberList numbers={numbers} />);
-------------------------------------------------
function ListItem(props) {
  return <li>{props.value}</li>;
}
function NumberList(props) {
  const numbers = props.numbers;
  const listItems = numbers.map((number) =>
    <ListItem key={number.toString()} value={number} />
  );
  return (
    <ul>
      {listItems}
    </ul>
  );
}
const numbers = [1, 2, 3, 4, 5];
root.render(<NumberList numbers={numbers} />);
-------------------------------------------------
function Blog(props) {
  const sidebar = (
    <ul>
      {props.posts.map((post) =>
        <li key={post.id}>{post.title}</li>
      )}
    </ul>
  );
  const content = props.posts.map((post) =>
    <div key={post.id}>
      <h3>{post.title}</h3>
      <p>{post.content}</p>
    </div>
  );
  return (
    <div>
      {sidebar}
      <hr />
      {content}
    </div>
  );
}
const posts = [
  {id: 1, title: 'Hello World', content: 'Welcome to learning React!'},
  {id: 2, title: 'Installation', content: 'You can install React from npm.'}
];
root.render(<Blog posts={posts} />);
-------------------------------------------------
设置状态：setState
替换状态：replaceState
设置属性：setProps
替换属性：replaceProps
强制更新：forceUpdate
获取DOM节点：findDOMNode
判断组件挂载状态：isMounted
class Counter extends React.Component<{}, {clickCount}>{
  constructor(props) {
      super(props);
      this.state = {clickCount: 0};
      this.handleClick = this.handleClick.bind(this);
  }
  
  handleClick() {
    this.setState(function(state) {
      return {clickCount: state.clickCount + 1};
    });
  }
  render () {
    return (<h2 onClick={this.handleClick}>{this.state.clickCount}</h2>);
  }
}
root.render(<Counter />);
-------------------------------------------------
class Clock extends React.Component {
  timerID!: number;
  state = {
      date: new Date()
  };
  componentDidMount() {
      this.timerID = window.setInterval(() => this.tick(), 1000);
  }
  componentWillUnmount() {
      clearInterval(this.timerID);
  }
  tick() {
      this.setState({date: new Date()});
  }
  render() {
      return (
          <div>
              <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
          </div>
      );
  }
}
root.render(<Clock />);
-------------------------------------------------
class HelloMessage extends React.Component {
  state = {value: 'Hello Runoob!'};  
  constructor(props) {
      super(props);
      this.handleChange = this.handleChange.bind(this);
  }
  handleChange(event) {
    this.setState({value: event.target.value});
  }
  render() {
    var value = this.state.value;
    return <div>
            <input type="text" value={value} onChange={this.handleChange} /> 
            <h4>{value}</h4>
           </div>;
  }
}
root.render(<HelloMessage />);
-------------------------------------------------2child
class Content extends React.Component<{myDataProp,updateStateProp},{}> {
  render() {
    return  <div>
              <input type="text" value={this.props.myDataProp} onChange={this.props.updateStateProp} /> 
              <h4>{this.props.myDataProp}</h4>
            </div>;
  }
}
class HelloMessage extends React.Component<{},{value}> {
  constructor(props) {
      super(props);
      this.state = {value: 'Hello Runoob!'};
      this.handleChange = this.handleChange.bind(this);
  }
 
  handleChange(event) {
    this.setState({value: event.target.value});
  }
  render() {
    var value = this.state.value;
    return <div>
            <Content myDataProp = {value} updateStateProp = {this.handleChange}></Content>
           </div>;
  }
}
root.render(<HelloMessage />);
-------------------------------------------------
class Parent extends React.Component<{},{}> {
  message = 'Hello world!';
  render() {
      return (
          <Child myProp={this.message} />
      );
  }
}
class Child extends React.Component<{myProp},{}> {
  message = this.props.myProp;
  render() {
      return (
          <div>{this.message}</div>
      );
  }
}
root.render(<Parent />);
-------------------------------------------------
class Parent extends React.Component {
  state = {message: '',};
  handleMsg(msg) {
      this.setState({message: msg,});
  }
  render() {
      return (
          <>
              {this.state.message}
              <Child onMsg={(msg) => this.handleMsg(msg)}/>
          </>
      );
  }
}

class Child extends React.Component<{onMsg}> {
  handleClick() {
      this.props.onMsg('Hello');
  }
  render() {
      return (
          <button onClick={() => this.handleClick()}>Clike me</button>
      );
  }
}
root.render(<Parent />);
-------------------------------------------------
父组件提前声明数据处理逻辑，该方法接收传入的值，然后进行相应处理；
父组件将该方法通过 props 传递给子组件；
子组件触发一些行为，得到了将要传递给父组件的值；
子组件通过 this.props 调用父组件传入的处理函数，并将要传递的值作为该函数的参数；
处理函数开始执行，由于其是在父组件的作用域中声明的，所以也能访问父组件中的一些数据，比如 state，相当于在父组件中处理子组件传入的数据；
处理函数更新 state 状态值，随后其他访问该 state 的地方也会随即更新；
-------------------------------------------------
class Parent extends React.Component {
  state = {msg: 'hello',}  
  handleChangeMsg(msg) {
      this.setState({msg: msg,});
  }  
  render() {
      return (<>
          <ChildLabel msg={this.state.msg} />
          <ChildButton onChangeMsg={(msg) => this.handleChangeMsg(msg)} />
      </>);
  }
}

class ChildLabel extends React.Component<{msg}> {
  render() {
      return <span>{this.props.msg}</span>
  }
}

class ChildButton extends React.Component<{onChangeMsg}> {
  render() {
      return (<button onClick={() => this.props.onChangeMsg('world')}>Change</button>)
  }
}
root.render(<Parent />);
